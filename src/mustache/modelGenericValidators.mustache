{{! Copyright(c) 2009 - 2019 Abelium d.o.o. }}
{{! Kajuhova 90, 1000 Ljubljana, Slovenia }}
{{! All rights reserved. }}
{{! Copyright(c) 1995 - 2018 T-Systems Multimedia Solutions GmbH }}
{{! Riesaer Str. 5, 01129 Dresden }}
{{! All rights reserved. }}
    /**
    * A map of tuples with error name and `ValidatorFn` for each property of {{classname}}.
    */
    export const ModelValidators: {[K in keyof {{classname}}]: [string, ValidatorFn][]} = {
    {{#vars}}
        {{name}}: [
                {{#required}}
                ['required', Validators.required],
                {{/required}}
                {{#hasValidation}}
                {{#minimum}}
                ['min', Validators.min({{minimum}})],
                {{/minimum}}
                {{#maximum}}
                ['max', Validators.max({{maximum}})],
                {{/maximum}}
                {{#minLength}}
                ['minlength', Validators.minLength({{minLength}})],
                {{/minLength}}
                {{#maxLength}}
                ['maxlength', Validators.maxLength({{maxLength}})],
                {{/maxLength}}
                {{#pattern}}
                ['pattern', Validators.pattern({{pattern}})],
                {{/pattern}}
                {{/hasValidation}}
        ],
    {{/vars}}
    };

    export function formGenerator(
          mod: {{classname}}
        ): FormGroupTyped<{{classname}}> {
	        var model: {{classname}} = {
	          {{#vars}}
	            {{name}}: null,
	          {{/vars}}
	        }
            if(mod != null) {
                model = mod;
            }
            return new FormGroup({
	          {{#vars}}
	          	{{#isPrimitiveType}}{{name}}: new FormControl(model.{{ name }}),{{/isPrimitiveType}}{{^isPrimitiveType}}{{#isListContainer}}{{name}}: new FormArray(model.{{ name }} ? model.{{name}}.map(x => {{complexType}}.formGenerator(x)) : []),{{/isListContainer}}{{^isListContainer}}{{#isEnum}}{{name}}: new FormControl(model.{{ name }}),{{/isEnum}}{{^isEnum}}{{name}}: {{dataType}}.formGenerator(model.{{ name }}),{{/isEnum}}{{/isListContainer}}{{/isPrimitiveType}}
	          {{/vars}}
            }) as FormGroupTyped<{{classname}}>;
    }

