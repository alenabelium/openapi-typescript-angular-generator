{{! Copyright(c) 2009 - 2019 Abelium d.o.o. }}
{{! Kajuhova 90, 1000 Ljubljana, Slovenia }}
{{! All rights reserved. }}
{{! Copyright(c) 1995 - 2018 T-Systems Multimedia Solutions GmbH }}
{{! Riesaer Str. 5, 01129 Dresden }}
{{! All rights reserved. }}
    {{^discriminator}}
    /**
    * A map of tuples with error name and `ValidatorFn` for each property of {{classname}}.
    */
    export const ModelValidators: {[K in keyof {{classname}}]: [string, ValidatorFn][]} = {
    {{#vars}}
        {{name}}: [
                {{#required}}
                ['required', Validators.required],
                {{/required}}
                {{#hasValidation}}
                {{#minimum}}
                ['min', Validators.min({{minimum}})],
                {{/minimum}}
                {{#maximum}}
                ['max', Validators.max({{maximum}})],
                {{/maximum}}
                {{#minLength}}
                ['minlength', Validators.minLength({{minLength}})],
                {{/minLength}}
                {{#maxLength}}
                ['maxlength', Validators.maxLength({{maxLength}})],
                {{/maxLength}}
                {{#pattern}}
                ['pattern', Validators.pattern({{pattern}})],
                {{/pattern}}
                {{/hasValidation}}
        ],
    {{/vars}}
    };
    {{/discriminator}}
    export function formGenerator(
          mod: {{classname}}, validators: Array<ValidatorFn> = []
        ): FormGroupTyped<{{classname}}> {
            {{^discriminator}}
	        var model: {{classname}} = {
	          {{#vars}}
	            {{name}}: null,
	          {{/vars}}
	        }
            {{/discriminator}}
            {{#discriminator}}
            var model: {{classname}};
            {{/discriminator}}
            if(mod != null) {
                model = mod;
            }
            {{^discriminator}}
            return new FormGroup({
	          {{#vars}}
	          	{{#isPrimitiveType}}{{name}}: new FormControl(model.{{ name }}, {{classname}}.ModelValidators.{{name}}.map(x => x[1])),{{/isPrimitiveType}}{{^isPrimitiveType}}{{#isListContainer}}{{name}}: new FormArray(model.{{ name }} ? model.{{name}}.map(x => {{complexType}}.formGenerator(x)) : []),{{/isListContainer}}{{^isListContainer}}{{#isEnum}}{{name}}: new FormControl(model.{{ name }}, {{classname}}.ModelValidators.{{name}}.map(x => x[1])),{{/isEnum}}{{^isEnum}}{{name}}: {{dataType}}.formGenerator(model.{{ name }}, {{classname}}.ModelValidators.{{name}}.map(x => x[1])),{{/isEnum}}{{/isListContainer}}{{/isPrimitiveType}}
	          {{/vars}}
            }, validators) as FormGroupTyped<{{classname}}>;
            {{/discriminator}}
            {{#discriminator}}
            {{#mappedModels}}
            if(model.{{discriminatorName}} == '{{mappingName}}') {
                return {{modelName}}.formGenerator(model);
            }
            {{/mappedModels}}
            throw Error();
            {{/discriminator}}
    }

    export function formAssign(formGroup: FormGroupTyped<{{classname}}>, el: {{classname}}) {
      {{#discriminator}}
        let val = formGroup.controls['{{discriminatorName}}'].value
        {{#mappedModels}}
        if (val == '{{mappingName}}') {
            {{modelName}}.formAssign(formGroup as FormGroupTyped<{{modelName}}>, el as {{modelName}});
        }
        {{/mappedModels}}
      {{/discriminator}}
      {{^discriminator}}
      {{#vars}}
	      {{#isPrimitiveType}}
                formGroup.controls['{{name}}'].setValue(el.{{name}});
        {{/isPrimitiveType}}
        {{^isPrimitiveType}}
                {{#isListContainer}}
                while((formGroup.controls['{{name}}'] as FormArray).length > 0) (formGroup.controls['{{name}}'] as FormArray).removeAt(0);
                for(let i of el.{{name}}) (formGroup.controls['{{name}}'] as FormArray).push({{complexType}}.formGenerator(i));
                {{/isListContainer}}
                {{^isListContainer}}
        {{#isEnum}}formGroup.controls['{{name}}'].setValue(el.{{name}});
        {{/isEnum}}
        {{^isEnum}}{{dataType}}.formAssign(formGroup.controls['{{name}}'] as FormGroupTyped<{{dataType}}>, el.{{name}});
        {{/isEnum}}
                {{/isListContainer}}
        {{/isPrimitiveType}}
      {{/vars}}
      {{/discriminator}}

    }

    export function emptyObject(): {{classname}} {
        {{^discriminator}}
        return ({
	          {{#vars}}
	            {{name}}: null,
	          {{/vars}}
        })
        {{/discriminator}}
        {{#discriminator}}
        return ({
	          {{#allVars}}
	            {{name}}: null,
	          {{/allVars}}
        })
        {{/discriminator}}
    }

    export function construct(el: any): {{classname}} {

        let obj = {} as {{classname}};
        {{#vars}}
            {{#isPrimitiveType}}
        obj.{{name}} = el.{{name}};
            {{/isPrimitiveType}}
            {{^isPrimitiveType}}
                    {{#isListContainer}}
        if(el.{{name}}) {
            if(['number', 'string', 'boolean'].indexOf('{{complexType}}')) {
                obj.{{name}} = [...el.{{name}}]
            } else {
                obj.{{name}} = el.{{name}}.map((x)  => {{complexType}}.construct(x));
            }
        } else {
            obj.{{name}} = []
        }
                    {{/isListContainer}}
                    {{^isListContainer}}
            {{#isEnum}}
        {{name}}: el.{{name}};
            {{/isEnum}}
            {{^isEnum}}
        obj.{{name}} = {{dataType}}.construct(el.{{name}});
            {{/isEnum}}
                    {{/isListContainer}}
            {{/isPrimitiveType}}
        {{/vars}}
        return obj;
    }

    {{#discriminator}}
    export function getTheRightType(el: {{classname}}FULL): {{classname}} {
        let val = el.{{discriminatorName}};
        {{#mappedModels}}
        if (val == '{{mappingName}}') {
            return {{modelName}}.construct(el);
        }
        {{/mappedModels}}
    }
    {{/discriminator}}

